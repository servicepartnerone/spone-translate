type Query {
  users: [User!]!
  user(id: String!): User
  projects: [Project!]!
  project(id: String!): Project
  languages: [Language!]!
  language(id: String!): Language
  namespaces: [Namespace!]!
  userSettings: User
}

type Mutation {
  signup(email: String!, password: String!, name: String): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createProject(name: String!): Project!
  createLanguage(name: String!, project: String!): Language!
  createNamespace(name: String!): Namespace!
  createTranslation(key: String!, value: String!): Translation!
  deleteUser(id: String!): User!
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String
  password: String!
  projects: [Project!]!
}

type Project {
  id: ID!
  name: String!
  languages: [Language!]!
  user: User!
}

type Language {
  id: ID!
  name: String!
  project: Project!
}

type Namespace {
  id: ID!
  name: String!
  translations: [Translation!]!
}

type Translation {
  id: ID!
  key: String!
  value: String!
  owner: Namespace!
  status: Status!
}

enum Status {
  ACTIVE
  DRAFT
  UPDATED
  REMOVED
}

scalar Date
